Assume 2 images in a batch, with 2 features with feature_dim = 2
[[2,7,4,8],
 [9,5,1,3]]

 Step1: reshape to (batch, n_kernel, kernel_dim) 
    - activation = input.view(-1, n_kernel, kernel_dim)
    - output shape: (2,2,2)
    [ [ [2,7], [4,8] ],
      [ [9,5], [1,3] ] ]


Step2: calculate absolute difference between features
    - create m1, add a dimension to be able to broadcast each number twice
        -- m1 = torch.unsqueeze(activation, 3) ---> (2, 2, 2, 1)
            [ [ [ [2], [7] ], [ [4], [8] ] ],
              [ [ [9], [5] ], [ [1], [3] ] ] ]
    - create m2, np.transpose(1,2,0), add a dimension to the beginning for broadcasting
        -- m2 = torch.unsqueeze(activation.transpose(0,2).transpose(0,1), 0) ---> (1, 2, 2, 2)
            [ [ [ [2,9], [7,5] ],
                [ [4,1], [8,3] ] ] ]
    - aside: broadcasting
        -- when subtracting a (2, 2, 2, 1) tensor k, to a (1, 2, 2, 2) tensor, g
        -- at the last dimension, k is doubled: [2] - [2, 4] => [2, 2] - [2, 4]
        -- at the first dimension, g is doubled
    - diff = abs(m1 - m2) ---> (2, 2, 2, 2)
    - diff_sum = torch.sum(diff, dim=2)
        -- torch.abs(m1-m2)

        -- diff[0][0][0] = [2] - [2,9] = [0,7]
            diff(im1_f1_d1, img1_f1_d1 & im2_f1_d1)
        -- diff[0][0][1] = [7] - [7,5] = [0,2]
            diff(im1_f1_d2, img1_f1_d2 & im2_f1_d2)
        -- diff_sum[0][0] = [0, 7] + [0, 2] = [0, 9]
            diff(im1_f1, img1_f1) & diff(im1_f1, im2_f1)
            
            ** self-difference (image1 feature1) - masked
            difference between feature1 of image1 vs. image2
        
        -- diff[0][1][0] = [4] - [4,1] = [0,3]
            diff(im1_f2_d1, img1_f2_d1 & im2_f2_d1)
        -- diff[0][1][1] = [8] - [8,3] = [0,5]
            diff(im1_f2_d2, img1_f2_d2 & im2_f2_d2)
        -- diff_sum[0][1] = [0, 3] + [0, 5] = [0, 8]
            diff(im1_f2, img1_f2) & diff(im1_f2, im2_f2)

            ** self-difference (image1 feature2) - masked
            difference between feature2 of image1 vs. image2
        
        -- diff[1][0][0] = [9] - [2,9] = [7,0]
            diff(im2_f1_d1, img1_f1_d1 & im2_f1_d1)
        -- diff[1][0][1] = [5] - [7,5] = [2,0]
            diff(im2_f1_d2, img1_f1_d2 & im2_f1_d2)
        -- diff_sum[1][0] = [7,0] + [2,0] = [9,0]
            diff(im2_f1, img1_f1) & diff(im2_f1, im2_f1)
            
            difference between feature1 of image2 vs. image1
            ** self-difference (image2 feature1) - masked
        
        -- diff[1][1][0] = [1] - [4,1] = [3,0]
            diff(im2_f2_d1, img1_f2_d1 & im2_f2_d1)
        -- diff[1][1][1] = [3] - [8,3] = [5,0]
            diff(im2_f2_d2, img1_f2_d2 & im2_f2_d2)
        -- diff_sum[1][1] = [3, 0] + [5, 0] = [8, 0]
            diff(im2_f2, img1_f2) & diff(im2 _f2, im2_f2)

            difference between feature2 of image2 vs. image1
            ** self-difference (image2 feature2) - masked

        -- output
            [ [ [0, 9], [0, 8] ],
              [ [9, 0], [9, 0] ] ]


Step3: apply mask to mask self-differences
    - create mask
        -- mask = torch.eye(batch_size) ---> (2,2)
            [ [1, 0],
              [0, 1] ]
        -- mask = torch.unsqueeze(eye, 1) ---> (2, 1, 2)
            [ [ [1, 0] ],
              [ [0, 1] ] ]
        -- mask = 1 - mask
            [ [ [0, 1] ],
              [ [1, 0] ] ]
        -- later broadcast into (2, 2, 2)
            [ [ [0, 1], [0, 1] ],
              [ [1, 0], [1, 0] ] ]

    - demonstration only: multiply the mask by the original diff matrix
        -- original diff matrix (2, 2, 2)
            [ [ [0, 9], [0, 8] ],
              [ [9, 0], [9, 0] ] ]
        -- element-wise multiply
            [ [ [0, 9], [0, 8] ],
              [ [9, 0], [9, 0] ] ]
        -- successfully masked self-difference and cross-difference
    
    - real deal: exponentiate original diff matrix first
        -- masked = torch.exp(-diff_sum) ---> (2, 2, 2)
            [ [ [1.0000e+00, 1.2341e-04],
                [1.0000e+00, 3.3546e-04]],

              [ [1.2341e-04, 1.0000e+00],
                [3.3546e-04, 1.0000e+00] ] ]
        -- masked = masked * mask ---> (2, 2, 2)
            [ [ [0         , 1.2341e-04],
                [0         , 3.3546e-04]],

              [ [1.2341e-04,          0],
                [3.3546e-04,          0] ] ]



substitute diff_sum with masked for real implementation

diff_sum dimension (batch, feature, batch)
    - example (4, 3, 4)
        tensor([[[ 0,  9,  7, 10],
                [ 0,  7,  3, 10],
                [ 0,  4,  6, 14]],

                [[ 9,  0,  6,  5],
                [ 7,  0,  6,  7],
                [ 4,  0,  6, 10]],

                [[ 7,  6,  0,  3],
                [ 3,  6,  0,  7],
                [ 6,  6,  0,  8]],

                [[10,  5,  3,  0],
                [10,  7,  7,  0],
                [14, 10,  8,  0]]])
    - first block represents the difference between features of image1 - image4
        -- first line represents the difference between feature1 of image1 - image4
    - split the tensor in half along the last dimension (result in two (4,3,2))
    - add the last dimension for each matrix, shrink the last dimension
        -- normalize by dividing each element by the sum of all elements for each matrix
    - now we have two (4,3) matrix
    - concatenate along the last dimension, becomes (4,6)
    - input will be (4,6)
        -- assuming batch_size=4, kernel/features = 3, feature_dim = 2
    - concatenate to produce final output (4,12)

conceptually
    - each block for diff_sum (shape (3,4)) becomes (6,)
        -- split into (3,2) and (3,2)
        -- add up, becomes (3,) and (3,)
        -- concatenate (6,)
    - first vector of (6, ) represents features of image1 vs. image1 - image4 
        -- contains similarity information that we need
